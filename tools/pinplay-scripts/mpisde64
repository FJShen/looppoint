#!/usr/bin/python3
# BEGIN_LEGAL
#
# Copyright (c)2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.  Redistributions
# in binary form must reproduce the above copyright notice, this list of
# conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.  Neither the name of
# the Intel Corporation nor the names of its contributors may be used to
# endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR
# ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# END_LEGAL
#
#
# @ORIGINAL_AUTHOR: Michael Klemm
#

# CHANGE LOG
#
# Version 0.1
#     - initial version
#  

from __future__ import print_function

from sys import argv
from os import environ
from socket import gethostname
from subprocess import call


# Get rank and process count from the Intel MPI library
try:
    rank = int(environ['PMI_RANK'])
    nmpi = int(environ['PMI_SIZE'])
except:
    print("Could not read PMI_RANK and PMI_SIZE.\n"
          "Please run with Intel MPI's mpirun or mpiexec")
    exit(1)
hostname = gethostname()


# Low-man's command line parsing, we do not fully parse the command line, 
# we are just filtering the ones that we are interested in.
try:
    cmdline = list(argv)
    for i, arg in enumerate(argv):
        if arg == '-omix':
            # We found the -omix argument, replace the next token 
            # with the mpisde variables replaced
            cmdline[i + 1] = cmdline[i + 1].format(rank=rank, nmpi=nmpi,
                                                   hostname=hostname)
    cmdline[0] = 'sde64'
except Exception as exc:
    print('Could not parse command line:', exc.message)
    exit(1)

        
# Build the SDE command line for the current rank
call(cmdline)   
