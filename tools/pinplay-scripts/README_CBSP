CBSP Python scripts README  (8/4/15)
--------------------------
The CBSP Python scripts are based on the PinPlay (PP) Python scripts.  The script
'sde_cbsp.py' is very similar to 'sde_pinpoints.py'.  Both scripts use
configuration files to define commonly used tracing parameters.  They also
share many of the same parameters/options.

The new parameter/option 'cbsp_name' is required for CBSP.  This string
is used for naming global files/directories used by the script. As with most
parameters, this can be defined either in a configuration file, or as a command
line option.

While the PP script uses a configuration file to describe the binary being
traced, the CBPS script requires one configuration file for each binary being
traced.  The CBSP binary config files are given with the option '--list_config
FILE,FILE'.

If the option '--config_file FILE' is given to the CBSP script, it's used as a
"master" CBSP file.  All parameters defined in master CBSP files are applied to
each binary being traced.

The process of generating traces with the CBSP scripts require several phases,
as is the case with the PP scripts.  A phase must be given when you run
sde_cbsp.py to indicate which one of the phases should be run.   If the option
'--default_phases' is given, all phases will be run in one invocation of the
script.  Multiple phases may also be given in the command line.   See
sde_cbsp.py -h for a list of the separate phases.

A small test case is included in the file 'CBSP_test_case.tbz2'.  This contains
two short running binaries (SSE_linpack and AVX_linpack), a master
configuration file (master.cfg) and two binary conf files (sse.cfg and
avx.cfg).

Once the test case is extracted, modify the parameter 'sdehome' in the master
CBSP config file to point to the SDE kit on your machine.

The following command will run the test case and generate LIT files:

    sde_cbsp.py --cfg master.cfg --list_cfg "avx.cfg sse.cfg" --default

This will generate a set of files/directories similar to the following:

    linpack.avx_47930.Data/
    linpack.avx_47930.lit/
    linpack.avx_47930.pp/
    linpack.avx.mix
    linpack_compare_isa.Data/
    linpack_compare_isa.info.status
    linpack.sse_47965.Data/
    linpack.sse_47965.lit/
    linpack.sse_47965.pp/
    linpack.sse.mix
    whole_program.linpack.avx/
    whole_program.linpack.sse/

Some directory names (Data/pp/lit) contain the PID of the process being traced,
so the files names generated will be slightly different.  The traces will be in
the *.lit dirctories.

------------------------------------------
Usage: sde_cbsp.py <phase> --cbsp_cfgs CFG_FILE,CFG_FILE[,CFG_FILE]  [options] 

This script uses Cross Binary SimPoint (CBSP) and PinPlay tools to create a
set of equal-work traces from two, or more, binaries compiled from the same
source.

At least one command line option must be given to chose the phase(s) of the
script to run. Use option '--default_phases' to run all phases. See section
"Phase options" for a list of phases. 

The option '--cbsp_cfgs' is also required to run this scripts.  It contains a
list of PinPlay configuration files.  Each file defines one of the binaries to
be traced.  (See 'sde_pinpoints.py -h' for more info on PinPlay config
files.)

Optional master CBSP config files may be given with the option '-cfg'.  The
parameters defined in each master cfg file are used for every binary.  Master
CBSP config files are not required.

Master CBSP cfg files are processed in order.  Command line options over-ride
values read from master CBSP configuration files. The long option name, not
the single letter option, must be used in the config files.

The parameter 'cbsp_name' MUST be defined in at least one configuration file
in order to run this script.  It may be defined in master/binary CBSP config
files or by command line option.

Example configuration file:
--------------------------------------------
[Parameters]
cbsp_name:     lipack_test
program_name:  linpack
input_name:    avx
command:       AVX_linpack 8
mode:          st
--------------------------------------------

Advanced Usage: Since CBSP is an extension of PinPlay, it's possible to
combine the two tool chains to generate traces.   For example, you can use
sde_pinplay.py to generate whole program pinballs in parallel (possibly using
NetBatch).  Then use the CBSP script to run the 'cb_match' and 'simpoint'
phases to select equivalent work clusters in each binary.  Finally, you can
run sde_pinpoints.py with NetBatch to generate region pinballs/LIT files in
parallel.

If using this method, you must use the configuration file for just one binary
with each invocation of the sde_pinpoints.py script.  Also, in order to
combine these tools, you must add the option '--add_program_wp' to each
sde_pinpoints.py run.  This is required so the directories names
generated/used by the two chains are compatible.

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  --add_program_wp      Add parameter 'program_name' to the directory name
                        used for the whole program pinballs.
  --append_status       Append status information to the existing status file
                        for this run instead of overwriting it.  Default is to
                        overwrite file.
  --cbsp_cfgs FILE,FILE[,FILE]
                        List two, or more, configuration file(s) which define
                        the binaries to be used for Cross Binary SimPoints
                        (CBSP).  Multiple instances of this option will be
                        concatenated into one list of binaries.  This is
                        required to run the CBSP script.
  --cfg FILE, --config_file FILE
                        Give one, or more, file(s) containing the application
                        tracing parameters. Must use '--cfg' for each file.
  -d, --debug           Print out the command(s), but do not execute.  Also
                        prints out diagnostic information as well.
  --delete              CAUTION! This option will delete all the files and
                        directories generated with the current tracing
                        parameters.  The only exception is if the user has
                        specified a whole program pinball directory with the
                        option '--whole_pgm_dir', then it will NOT be deleted.
  --delete_all          CAUTION! Delete ALL files and directories generated
                        for ALL tracing instances.
  --log_options=LOG_OPTIONS
                        Pass knobs (options) to the logger pintool.
  --pintool=PINTOOL     Override the default pintool for this kit with
                        PINTOOL.
  --pin_options=PIN_OPTIONS
                        Pass knobs (options) to pin (not the pintool).
  --replay_options=REPLAY_OPTIONS
                        Pass raw options to the replayer pintool.
  --save_global         To help debugging, save the global data files instead
                        of deleting them.
  --verbose             Print out command line used and other information.
  --lit_options=LIT_OPTIONS
                        Pass raw options to pinLIT pintool.

  Phase options:
    These options select the tracing phases to execute. Either one, or
    more, phase option must be given or the option '--default_phases'
    which runs all default phases. Must define parameters 'program_name'
    and 'input_name' for every phase.  The logging phase '-log' also
    requires 'command' and 'mode'.  Phases are executed in the order given
    below:

    --default_phases    Always run these default phases: log, cb_match,
                        simpoint, region_pinball, lit_gen, region_sim,
                        whole_sim and pred_error.
    -l, --log           Generate whole program pinballs for the application.
                        Required parameters: program_name, input_name,
                        command, mode
    --cb_match          Run the cross binary simpoints matcher.  Used for
                        CBSP.
    -s, --simpoint      Run Simpoint using whole program pinball basic block
                        vectors (BBV).
    -p, --region_pinball
                        Relog whole program pinballs using representative
                        regions from Simpoint to generate region pinballs.
    -L, --lit_gen       Generate LIT and LMAT files.
    -T, --region_sim    Run the simulator on the region pinballs.
    -W, --whole_sim     Run the simulator on the whole program pinballs.
    -c, --pred_error, --calc_func
                        Calculate the prediction error, using the metric of
                        interest, for a set of representative regions.  Must
                        have already generated simulator data, either using
                        phases '--whole_sim' and '--region_sim' or the
                        appropriate options for your simulator,  before
                        running this phase.  ('--calc_func' is included for
                        backward compatability.)

  General parameter options:
    These options allow the user to define tracing parameters. They can
    also be given in the tracing configuration file(s). Command line
    options over-ride parameters defined in the configuration file(s).
    IMPORTANT NOTE: When using SDE (not PinPlay), the two parameters
    'program_name' and 'input_name' can NOT have either the char '.' or
    '_' in them.

    --cbsp_name=CBSP_NAME
                        CBSP_NAME is the name of the Cross Binary SimPoint
                        (CBSP) run.  This parameter is required for running
                        CBSP.
    --input_name=INPUT_NAME
                        Name of the input file or workload. No default. Must
                        be defined in either the tracing configuration file or
                        this option.  NOTE: This paramater can NOT have either
                        the char '.' or '_' in it.
    --num_cores=NUM_CORES
                        Number of cores to use for running phases
                        concurrently.  Default is the number of cores on the
                        system.  Set to 1 to run serially.
    --program_name=PROGRAM_NAME
                        Name of the application to trace. No default. Must be
                        defined in either the tracing configuration file or
                        this option. NOTE: This paramater can NOT have either
                        the char '.' or '_' in it.
    --sdehome=SDEHOME   Set the directory where the SDE kit is located.
                        Default: $HOME/SDE

  Simpoint parameter options:
    These options define parameters which are used in the Simpoint phase
    (--simpoint).

    --maxk=MAXK         Set the value MAXK for Simpoint. This is the maximum
                        number of traces which may be generated.  Fewer traces
                        will be generated in many cases. Default: 20
    --simpoint_options=SIMPOINT_OPTIONS
                        Options passed to the Simpoint binary. NOTE: Replaces
                        all knobs normally given on the Simpoint command line.
                        Must explicitly define all knobs required for the
                        desired behavior when running Simpoints with this
                        option.
    -S SLICE_SIZE, --slice_size=SLICE_SIZE
                        Number of instructions in each slice (representative
                        region). Default: 30,000,000

  Region pinball generation parameter options:
    These options define parameters which are used in the region pinball
    generation phase (--region_pinball).

    --epilog_length=EPILOG_LENGTH
                        Number of extra instruction to be included after
                        region. Default: 0
    --prolog_length=PROLOG_LENGTH
                        Number of extra instruction to be included before the
                        region. Default: 0
    -w WARMUP_LENGTH, --warmup_length=WARMUP_LENGTH
                        Number of extra instruction to be included before
                        prolog. Default: 500,000,000

  Phase modification options:
    These options modify the behavior of one, or more, phase(s).

    --cross_os          Use when a log file (pinball) is collected on one OS,
                        and processed on a different OS (e.g. Windows/Linux or
                        Android/Linux).  This may cause some address ranges to
                        be relocated and the translation of addresses
                        referencing them.
    --list              Print the list of commands this script would execute.
                        Does NOT run these commands.

------------------------------------------

Python module versions:
brpred_kit.py             1.29
brpred_metric.py          1.27
brpred_pinpoints.py       1.22
brpred_replay_dir.py      1.12
brpred_replayer.py        1.14
cbsp.py                   1.9
cbsp_phases.py            1.14
cmd_options.py            1.97
config.py                 1.119
correct_size_matrix.py    1.7
drd_util.py               1.10
find_code_exclude.py      1.4
gdb_record.py             1.5
gdb_replay.py             1.4
keiko_kit.py              1.4
keiko_run.py              1.6
keiko_run_dir.py          1.4
kit.py                    1.57
log.py                    1.12
logger.py                 1.82
msg.py                    1.38
pb_weight.py              1.4
phases.py                 1.126
pinpoints.py              1.99
proj.py                   1.4
record.py                 1.26
regions.py                1.28
relog.py                  1.10
rename.py                 1.21
replay.py                 1.13
replay_dir.py             1.77
replayer.py               1.66
sde_cbsp.py               1.10
sde_cmpsim_kit.py         1.48
sde_cmpsim_metric.py      1.14
sde_cmpsim_replay_dir.py  1.17
sde_cmpsim_replayer.py    1.20
sde_kit.py                1.47
sde_log.py                1.2
sde_logger.py             1.27
sde_phases.py             1.63
sde_pinpoints.py          1.52
sde_replay_dir.py         1.21
sde_replayer.py           1.27
sim_kit.py                1.10
sim_run.py                1.15
sim_run_dir.py            1.13
simpoint.py               1.31
sniper_pinpoints.py       1.37
traceinfo.py              1.6
util.py                   1.129
verify.py                 1.5
x86_kit.py                1.10
x86_run.py                1.10
x86_run_dir.py            1.12

